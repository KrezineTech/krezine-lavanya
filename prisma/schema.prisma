generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  name                  String?
  role                  UserRole          @default(USER)
  createdAt             DateTime          @default(now())
  emailVerified         DateTime?
  image                 String?
  isActive              Boolean           @default(true)
  lastLoginAt           DateTime?
  password              String?
  permissions           String[]          @default([])
  updatedAt             DateTime          @updatedAt
  adminSessionActive    Boolean           @default(false)
  frontendSessionActive Boolean           @default(false)
  lastAdminLoginAt      DateTime?
  lastFrontendLoginAt   DateTime?
  lastLoginSource       LoginSource?
  accounts              Account[]
  orders                Order[]
  sessions              Session[]
  addresses             UserAddress[]

  @@index([email])
  @@index([role])
}

model FrontendUser {
  id               String                @id @default(cuid())
  email            String                @unique
  name             String?
  password         String?
  isActive         Boolean               @default(true)
  emailVerified    Boolean               @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  lastLoginAt      DateTime?
  sessionActive    Boolean               @default(false)
  // Customer-specific fields
  phone            String?
  dateOfBirth      DateTime?
  gender           String?
  preferences      Json? // Store user preferences as JSON
  marketingConsent Boolean               @default(false)
  // Addresses
  addresses        FrontendUserAddress[]
  // Orders
  orders           Order[]
  // Reviews
  reviews          Review[]
  chatParticipants      ChatParticipant[]
  chatMessages          ChatMessage[]
  userPresence          UserPresence[]
  typingIndicators      TypingIndicator[]
  messageDeliveries     MessageDelivery[]
  sentMessages          Message[]         @relation("MessageSender")
  receivedMessages      Message[]         @relation("MessageReceiver")
  // Basic messaging - will add FrontendMessage model later

  @@index([email])
  @@index([isActive])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                       String              @id @default(cuid())
  name                     String
  slug                     String              @unique
  shortDescription         String?
  description              Json?
  price                    Float?
  priceCents               Int                 @default(0)
  compareAtCents           Int?
  currency                 String              @default("USD") @db.VarChar(3)
  sku                      String?             @unique
  stock                    Int?
  stockQuantity            Int                 @default(0)
  inventoryManaged         Boolean             @default(true)
  weightGrams              Int?
  heightMm                 Int?
  widthMm                  Int?
  depthMm                  Int?
  isFeatured               Boolean             @default(false)
  ratingAverage            Float?
  numReviews               Int?                @default(0)
  status                   String              @default("Active")
  tags                     String[]            @default([])
  medium                   String[]            @default([])
  style                    String[]            @default([])
  materials                String[]            @default([])
  techniques               String[]            @default([])
  salePriceCents           Int?
  countrySpecificPrices    Json?
  personalization          Boolean             @default(false)
  shippingProfile          String?
  returnPolicy             String?
  metaTitle                String?
  metaDescription          String?
  metadata                 Json?
  categoryId               String?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  isVideoIntegratedVisible Boolean             @default(true)
  sortOrder                Int                 @default(0)
  media                    Media[]
  orderItems               OrderItem[]
  category                 Category?           @relation(fields: [categoryId], references: [id])
  collections              ProductCollection[]
  reviews                  Review[]

  @@index([slug])
  @@index([sku])
  @@index([status])
  @@index([sortOrder])
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String?      @unique
  image       String?
  description String?
  parentId    String?
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Category?    @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[]   @relation("CategoryToCategory")
  collections Collection[]
  media       Media[]
  products    Product[]

  @@index([slug])
  @@index([name])
  @@map("CategoryHierarchy")
}

model Collection {
  id          String              @id @default(cuid())
  name        String
  slug        String?             @unique
  image       String?
  description String?
  categoryId  String?
  metadata    Json?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  category    Category?           @relation(fields: [categoryId], references: [id])
  media       Media[]
  products    ProductCollection[]

  @@index([categoryId])
  @@index([slug])
}

model ProductCollection {
  productId    String
  collectionId String
  sortOrder    Int?       @default(0)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@index([collectionId])
  @@index([productId])
}

model Media {
  id           String      @id @default(cuid())
  fileName     String
  filePath     String
  fileType     FileType
  fileSize     Int
  mimeType     String?
  sizeBytes    Int?
  productId    String?
  categoryId   String?
  collectionId String?
  width        Int?
  height       Int?
  durationMs   Int?
  altText      String?
  title        String?
  isPrimary    Boolean     @default(false)
  checksum     String?
  metadata     Json?
  createdAt    DateTime    @default(now())
  blogId       String?
  blog         Blog?       @relation(fields: [blogId], references: [id], onDelete: Cascade)
  category     Category?   @relation(fields: [categoryId], references: [id])
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([categoryId])
  @@index([collectionId])
  @@index([isPrimary])
  @@index([blogId])
}

model Blog {
  id            String     @id @default(cuid())
  title         String
  slug          String?    @unique
  content       Json
  excerpt       String?
  author        String
  status        BlogStatus @default(Draft)
  featuredImage String?
  metadata      Json?
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  media         Media[]

  @@index([slug])
}

model Page {
  id        String     @id @default(cuid())
  title     String
  slug      String     @unique
  content   Json
  status    PageStatus @default(Draft)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model DynamicPage {
  id             String             @id @default(cuid())
  section        DynamicPageSection
  title          String?
  subtitle       String?
  description    String?
  buttonText     String?
  desktopImage   String?
  mobileImage    String?
  image          String?
  videoSource    String?
  paragraph1     String?
  paragraph2     String?
  designerImage  String?
  designerQuote  String?
  bannerImage    String?
  interiorImage  String?
  paragraphTexts Json?
  metaData       Json?
  isActive       Boolean            @default(true)
  sortOrder      Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@unique([section, sortOrder])
  @@index([section])
  @@index([isActive])
}

model Review {
  id             String        @id @default(cuid())
  customerName   String
  customerAvatar String?
  productId      String
  productName    String?
  productImage   String?
  rating         Int
  title          String
  content        String
  status         ReviewStatus  @default(Pending)
  createdAt      DateTime      @default(now())
  product        Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  frontendUser   FrontendUser? @relation(fields: [frontendUserId], references: [id])
  frontendUserId String?

  @@index([productId])
  @@index([frontendUserId])
}

/// Top-level conversation / thread shown in list view
model MessageThread {
  id                Int                   @id @default(autoincrement())
  subject           String
  senderName        String
  senderEmail       String?
  senderAvatar      String?
  isPreviousBuyer   Boolean               @default(false)
  isOrderHelp       Boolean               @default(false)
  folder            MessageFolder         @default(INBOX)
  read              Boolean               @default(false)
  privateNote       String?
  mostRecentOrderId String?
  totalPurchased    String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  deleted           Boolean               @default(false)
  tenantId          String?
  attachments       Attachment[]
  conversation      ConversationMessage[]
  labels            MessageLabel[]
  TypingIndicator   TypingIndicator[]

  @@index([folder, read])
  @@index([senderName])
  @@index([mostRecentOrderId])
}

/// Each message in the thread (customer message or admin reply)
model ConversationMessage {
  id              Int               @id @default(autoincrement())
  threadId        Int
  authorRole      AuthorRole
  authorName      String
  authorAvatar    String?
  content         String
  contentHtml     String?
  createdAt       DateTime          @default(now())
  isSystem        Boolean           @default(false)
  attachments     Attachment[]
  thread          MessageThread     @relation(fields: [threadId], references: [id], onDelete: Cascade)
  MessageDelivery MessageDelivery[]

  @@index([threadId, createdAt])
}

/// Attachments (images/files) referenced by a conversation message, chat message, or direct message
model Attachment {
  id                    Int                  @id @default(autoincrement())
  url                   String
  filename              String
  mimeType              String?
  size                  Int?
  uploadedBy            String?
  conversationMessageId Int?
  messageThreadId       Int?
  chatMessageId         String?
  messageId             String? // For direct messages
  createdAt             DateTime             @default(now())
  conversationMessage   ConversationMessage? @relation(fields: [conversationMessageId], references: [id], onDelete: Cascade)
  messageThread         MessageThread?       @relation(fields: [messageThreadId], references: [id], onDelete: Cascade)
  chatMessage           ChatMessage?         @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
  message               Message?             @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([conversationMessageId])
  @@index([messageThreadId])
  @@index([chatMessageId])
  @@index([messageId])
}

/// Reusable quick replies/templates
model QuickReply {
  id         Int      @id @default(autoincrement())
  title      String
  name       String
  content    String
  savedCount Int      @default(0)
  createdBy  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name])
}

/// Labels/tags for threads (optional user-defined)
model Label {
  id        Int            @id @default(autoincrement())
  name      String
  color     String?
  createdBy String?
  createdAt DateTime       @default(now())
  threads   MessageLabel[]
}

/// Join table for many-to-many between threads and labels
model MessageLabel {
  id        Int           @id @default(autoincrement())
  threadId  Int
  labelId   Int
  createdAt DateTime      @default(now())
  label     Label         @relation(fields: [labelId], references: [id], onDelete: Cascade)
  thread    MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, labelId])
  @@index([labelId])
  @@index([threadId])
}

model Discount {
  id             String         @id @default(cuid())
  title          String
  code           String         @unique
  description    String?
  status         DiscountStatus @default(Draft)
  method         DiscountMethod @default(Code)
  type           String
  value          Float?
  valueUnit      String?
  combinations   Json?
  used           Int            @default(0)
  startAt        DateTime?
  endAt          DateTime?
  limitTotalUses Int?
  limitPerUser   Boolean?       @default(false)
  requirements   Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

/// FAQs Model
model Faq {
  id        String   @id @default(cuid())
  title     String   @unique
  question  String
  answer    String
  isVisible Boolean  @default(true)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
  @@index([isVisible])
  @@index([title, sortOrder])
}

/// Chat System Models
model Chat {
  id                 String    @id @default(cuid())
  type               ChatType  @default(DIRECT)
  title              String?
  description        String?
  isActive           Boolean   @default(true)
  lastMessageAt      DateTime?
  lastMessagePreview String?
  participantCount   Int       @default(0)
  createdBy          String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relationships
  participants     ChatParticipant[]
  messages         ChatMessage[]
  typingIndicators TypingIndicator[]

  @@index([lastMessageAt])
  @@index([isActive])
  @@index([createdBy])
  @@index([type])
}

model ChatParticipant {
  id         String    @id @default(cuid())
  chatId     String
  userId     String
  role       ChatRole  @default(MEMBER)
  joinedAt   DateTime  @default(now())
  leftAt     DateTime?
  isActive   Boolean   @default(true)
  lastReadAt DateTime?

  // Relationships
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user FrontendUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@index([isActive])
}

model ChatMessage {
  id          String        @id @default(cuid())
  chatId      String
  senderId    String
  content     String
  messageType MessageType   @default(TEXT)
  status      MessageStatus @default(UNREAD) // Track message status
  metadata    Json?
  replyToId   String?
  editedAt    DateTime?
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  chat        Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      FrontendUser      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo     ChatMessage?      @relation("ChatMessageReply", fields: [replyToId], references: [id])
  replies     ChatMessage[]     @relation("ChatMessageReply")
  attachments Attachment[]
  deliveries  MessageDelivery[] // Track delivery status for each recipient

  @@index([chatId, createdAt])
  @@index([senderId])
  @@index([replyToId])
  @@index([messageType])
  @@index([status])
  @@index([chatId, senderId, createdAt]) // For efficient message history queries
  @@index([chatId, status, createdAt]) // For unread message queries
}

/// Real-time Chat Enhancements
model UserPresence {
  id        String           @id @default(cuid())
  userId    String
  userType  UserPresenceType @default(CUSTOMER)
  status    PresenceStatus   @default(OFFLINE)
  lastSeen  DateTime         @default(now())
  socketId  String?
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  user FrontendUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, userType])
  @@index([userId])
  @@index([status])
  @@index([lastSeen])
}

model TypingIndicator {
  id        String           @id @default(cuid())
  threadId  Int? // For MessageThread
  chatId    String? // For Chat
  userId    String
  userType  UserPresenceType
  isTyping  Boolean          @default(true)
  socketId  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  user   FrontendUser   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread MessageThread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  chat   Chat?          @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@unique([chatId, userId])
  @@index([threadId])
  @@index([chatId])
  @@index([userId])
  @@index([isTyping])
}

model MessageDelivery {
  id              String           @id @default(cuid())
  messageId       Int? // For ConversationMessage
  chatMessageId   String? // For ChatMessage
  directMessageId String? // For direct Message
  recipientId     String
  recipientType   UserPresenceType
  status          DeliveryStatus   @default(SENT)
  deliveredAt     DateTime?
  readAt          DateTime?
  socketId        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  message       ConversationMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chatMessage   ChatMessage?         @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
  directMessage Message?             @relation(fields: [directMessageId], references: [id], onDelete: Cascade)
  recipient     FrontendUser         @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([messageId, recipientId])
  @@unique([chatMessageId, recipientId])
  @@unique([directMessageId, recipientId])
  @@index([messageId])
  @@index([chatMessageId])
  @@index([directMessageId])
  @@index([recipientId])
  @@index([status])
}

/// Enhanced direct messaging between users
model Message {
  id          String      @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  messageType MessageType @default(TEXT)
  metadata    Json?
  replyToId   String?
  editedAt    DateTime?
  deletedAt   DateTime?
  timestamp   DateTime    @default(now())
  isRead      Boolean     @default(false)
  readAt      DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  sender      FrontendUser      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    FrontendUser      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  replyTo     Message?          @relation("DirectMessageReply", fields: [replyToId], references: [id])
  replies     Message[]         @relation("DirectMessageReply")
  attachments Attachment[]
  deliveries  MessageDelivery[] // Track delivery status

  @@index([senderId])
  @@index([receiverId])
  @@index([timestamp])
  @@index([isRead])
  @@index([senderId, receiverId, timestamp]) // For conversation history
  @@index([receiverId, senderId, timestamp]) // For conversation history (reverse)
}

enum ChatType {
  DIRECT
  GROUP
}

enum ChatRole {
  MEMBER
  ADMIN
  MODERATOR
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum UserPresenceType {
  CUSTOMER
  ADMIN
  SUPPORT
}

enum PresenceStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

model ContactMessage {
  id         String          @id @default(cuid())
  name       String
  email      String
  phone      String?
  subject    String
  message    String
  category   ContactCategory @default(GENERAL)
  status     ContactStatus   @default(NEW)
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  adminNotes String?
  assignedTo String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([status])
  @@index([category])
  @@index([email])
  @@index([createdAt])
}

/// Orders System
model Order {
  id                String            @id @default(cuid())
  number            String            @unique
  userId            String? // For admin users
  frontendUserId    String? // For frontend customers
  guestEmail        String?
  guestPhone        String?
  customerName      String?
  subtotalCents     Int               @default(0)
  shippingCents     Int               @default(0)
  taxCents          Int               @default(0)
  discountCents     Int               @default(0)
  grandTotalCents   Int               @default(0)
  currency          String            @default("USD") @db.VarChar(3)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  tags              String[]          @default([])
  notes             String?
  metadata          Json?
  cancelReason      String?
  cancelledAt       DateTime?
  billingAddressId  String?
  shippingAddressId String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  auditLogs         AuditLog[]
  billingAddress    Address?          @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?          @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?             @relation(fields: [userId], references: [id])
  frontendUser      FrontendUser?     @relation(fields: [frontendUserId], references: [id])
  items             OrderItem[]
  payments          Payment[]
  refunds           Refund[]
  shipments         Shipment[]

  @@index([number])
  @@index([userId])
  @@index([frontendUserId])
  @@index([guestEmail])
  @@index([paymentStatus])
  @@index([fulfillmentStatus])
  @@index([createdAt])
}

model OrderItem {
  id                 String   @id @default(cuid())
  orderId            String
  productId          String?
  sku                String?
  name               String
  priceCents         Int
  quantity           Int
  fulfilledQty       Int      @default(0)
  refundedQty        Int      @default(0)
  fulfillmentGroupId String?
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  order              Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product? @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([sku])
}

model Address {
  id             String     @id @default(cuid())
  firstName      String?
  lastName       String?
  company        String?
  address1       String
  address2       String?
  city           String
  state          String?
  postalCode     String
  country        String     @default("US")
  phone          String?
  ordersBilling  Order[]    @relation("OrderBillingAddress")
  ordersShipping Order[]    @relation("OrderShippingAddress")
  shipmentsFrom  Shipment[] @relation("ShipmentFromAddress")
  shipmentsTo    Shipment[] @relation("ShipmentToAddress")
}

model UserAddress {
  id          String      @id @default(cuid())
  userId      String
  name        String
  phone       String
  pincode     String
  address     String
  city        String
  state       String
  landmark    String?
  addressType AddressType @default(HOME)
  isDefault   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
}

model FrontendUserAddress {
  id             String       @id @default(cuid())
  frontendUserId String
  name           String
  phone          String
  pincode        String
  address        String
  city           String
  state          String
  landmark       String?
  addressType    AddressType  @default(HOME)
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  frontendUser   FrontendUser @relation(fields: [frontendUserId], references: [id], onDelete: Cascade)

  @@index([frontendUserId])
  @@index([isDefault])
}

model Payment {
  id               String        @id @default(cuid())
  orderId          String
  provider         String
  providerChargeId String?
  status           PaymentStatus @default(PENDING)
  amountCents      Int
  capturedCents    Int           @default(0)
  refundedCents    Int           @default(0)
  currency         String        @default("USD") @db.VarChar(3)
  method           String?
  metadata         Json?
  authorizedAt     DateTime?
  capturedAt       DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  order            Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  refunds          Refund[]

  @@index([orderId])
  @@index([provider])
  @@index([status])
}

model Shipment {
  id                String          @id @default(cuid())
  orderId           String
  carrier           String
  service           String
  trackingNumber    String?
  labelUrl          String?
  status            ShipmentStatus  @default(PENDING)
  costCents         Int?
  currency          String          @default("USD") @db.VarChar(3)
  fromAddressId     String?
  toAddressId       String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  fromAddress       Address?        @relation("ShipmentFromAddress", fields: [fromAddressId], references: [id])
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  toAddress         Address?        @relation("ShipmentToAddress", fields: [toAddressId], references: [id])
  items             ShipmentItem[]
  trackingEvents    TrackingEvent[]

  @@index([orderId])
  @@index([trackingNumber])
  @@index([status])
}

model ShipmentItem {
  id          String   @id @default(cuid())
  shipmentId  String
  orderItemId String
  quantity    Int
  createdAt   DateTime @default(now())
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
  @@index([orderItemId])
}

model TrackingEvent {
  id          String         @id @default(cuid())
  shipmentId  String
  status      ShipmentStatus
  description String?
  location    String?
  timestamp   DateTime
  metadata    Json?
  createdAt   DateTime       @default(now())
  shipment    Shipment       @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
  @@index([timestamp])
}

model Refund {
  id               String       @id @default(cuid())
  orderId          String
  paymentId        String?
  amountCents      Int
  reason           String?
  status           RefundStatus @default(PENDING)
  provider         String?
  providerRefundId String?
  metadata         Json?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  order            Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  payment          Payment?     @relation(fields: [paymentId], references: [id])
  items            RefundItem[]

  @@index([orderId])
  @@index([paymentId])
  @@index([status])
}

model RefundItem {
  id          String   @id @default(cuid())
  refundId    String
  orderItemId String
  quantity    Int
  amountCents Int
  createdAt   DateTime @default(now())
  refund      Refund   @relation(fields: [refundId], references: [id], onDelete: Cascade)

  @@index([refundId])
  @@index([orderItemId])
}

model AuditLog {
  id            String   @id @default(cuid())
  orderId       String?
  entityType    String
  entityId      String
  action        String
  actor         String
  actorType     String
  changes       Json?
  metadata      Json?
  correlationId String?
  createdAt     DateTime @default(now())
  order         Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([entityType, entityId])
  @@index([actor])
  @@index([createdAt])
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
  SUPPORT
  USER
}

enum LoginSource {
  FRONTEND
  ADMIN
  API
}

enum FileType {
  IMAGE
  VIDEO
}

enum BlogStatus {
  Draft
  Published
  Archived
}

enum PageStatus {
  Draft
  Published
}

enum DynamicPageSection {
  HOME_HERO_SLIDER
  HOME_VIDEO_SHOWCASE
  HOME_MEET_ARTIST
  HOME_CUSTOM_PAINTING_SECTION
  ABOUT_PAGE_HEADER
  ABOUT_CONTENT
  SHARED_REVIEWS_HEADER
  SHARED_BLOG_HEADER
  SHARED_FAQ_HEADER
  SHARED_CONTACT_HEADER
  SHARED_CHECKOUT_HEADER
  HOME_INDIAN_ART_SECTION
  HOME_SUBCATEGORY_SLIDER
  HOME_OUR_STANDARDS
  HOME_TESTIMONIAL_SLIDER
}

enum ReviewStatus {
  Pending
  Approved
  Rejected
}

enum MessageStatus {
  UNREAD
  READ
  ARCHIVED
  DELETED
}

enum MessageFolder {
  INBOX
  SENT
  TRASH
  ARCHIVE
  SPAM
}

enum AuthorRole {
  CUSTOMER
  SELLER
  SUPPORT
  SYSTEM
  OTHER
}

/// Discounts/Coupons
enum DiscountStatus {
  Active
  Scheduled
  Expired
  Draft
}

enum DiscountMethod {
  Code
  Automatic
}

/// Contact Messages Model
enum ContactStatus {
  NEW
  READ
  RESOLVED
}

enum ContactCategory {
  GENERAL
  SUPPORT
  SALES
  COMMISSION
  FEEDBACK
  ORDER_INQUIRY
}

enum AddressType {
  HOME
  WORK
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  PARTIALLY_REFUNDED
  REFUNDED
  VOIDED
  FAILED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  PARTIALLY_DELIVERED
  DELIVERED
  CANCELLED
}

enum ShipmentStatus {
  PENDING
  LABEL_CREATED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
  CANCELLED
}

enum RefundStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
